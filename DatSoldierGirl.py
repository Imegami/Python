import random
import json
import os

class Soldado:
    def __init__(self, nombre):
        self.nombre = nombre
        self.nivel = 1
        self.exp = 0
        self.exp_siguiente = 100
        self.hp = 100
        self.hp_max = 100
        self.energia = 100
        self.energia_max = 100
        self.dinero = 500
        
        # Atributos
        self.fuerza = 10
        self.agilidad = 10
        self.resistencia = 10
        self.punteria = 10
        self.carisma = 10
        self.puntos_habilidad = 0
        
        # Inventario y equipamiento
        self.arma_actual = None
        self.armadura_actual = None
        self.inventario = []
        self.armas = []
        self.regalos = []
        
        # Relaciones
        self.novia = None
        self.nivel_relacion = 0
        
        # Mascota
        self.mascota = None
        
        # Misiones
        self.misiones_completadas = 0
        self.reputacion = 0

class Mascota:
    def __init__(self, nombre, tipo):
        self.nombre = nombre
        self.tipo = tipo  # "Perro", "Gato", "Halc√≥n"
        self.nivel = 1
        self.hp = 50
        self.hp_max = 50
        self.lealtad = 50
        self.habilidades = []
        
        if tipo == "Perro":
            self.habilidades = ["Rastreo", "Ataque", "Guardia"]
            self.bonus_combate = 5
        elif tipo == "Gato":
            self.habilidades = ["Sigilo", "Agilidad", "Detecci√≥n"]
            self.bonus_sigilo = 5
        elif tipo == "Halc√≥n":
            self.habilidades = ["Reconocimiento", "Vigilancia", "Mensaje"]
            self.bonus_intel = 5

class Arma:
    def __init__(self, nombre, tipo, da√±o, precisi√≥n, precio):
        self.nombre = nombre
        self.tipo = tipo
        self.da√±o = da√±o
        self.precisi√≥n = precisi√≥n
        self.precio = precio
        self.nivel_mejora = 0
        self.modificadores = []

class Novia:
    def __init__(self, nombre):
        self.nombre = nombre
        self.hp = 80
        self.hp_max = 80
        self.amor = 50
        self.en_peligro = False
        self.regalos_recibidos = []

class Mision:
    def __init__(self, nombre, descripcion, tipo, dificultad, recompensa_exp, recompensa_dinero):
        self.nombre = nombre
        self.descripcion = descripcion
        self.tipo = tipo  # "Combate", "Sigilo", "Rescate", "Intel"
        self.dificultad = dificultad
        self.recompensa_exp = recompensa_exp
        self.recompensa_dinero = recompensa_dinero
        self.completada = False

class JuegoRPG:
    def __init__(self):
        self.soldado = None
        self.tienda_armas = self.crear_tienda_armas()
        self.tienda_regalos = self.crear_tienda_regalos()
        self.enemigos = self.crear_enemigos()
        self.misiones_disponibles = self.crear_misiones()
        
    def crear_tienda_armas(self):
        return [
            Arma("Pistola M9", "Pistola", 25, 85, 200),
            Arma("Rifle M4", "Rifle", 45, 90, 800),
            Arma("Sniper Barrett", "Francotirador", 120, 95, 2000),
            Arma("Escopeta", "Escopeta", 60, 70, 600),
            Arma("SMG", "Subfusil", 35, 80, 400),
            Arma("Cuchillo T√°ctico", "Cuerpo a cuerpo", 20, 100, 100)
        ]
    
    def crear_tienda_regalos(self):
        return [
            {"nombre": "Flores", "precio": 50, "amor": 10},
            {"nombre": "Chocolate", "precio": 30, "amor": 8},
            {"nombre": "Joya", "precio": 300, "amor": 25},
            {"nombre": "Peluche", "precio": 80, "amor": 12},
            {"nombre": "Perfume", "precio": 150, "amor": 18},
            {"nombre": "Libro", "precio": 40, "amor": 9}
        ]
    
    def crear_enemigos(self):
        return [
            {"nombre": "Terrorista", "hp": 60, "da√±o": 20, "exp": 30, "dinero": 100},
            {"nombre": "Francotirador Enemigo", "hp": 80, "da√±o": 35, "exp": 50, "dinero": 200},
            {"nombre": "L√≠der Terrorista", "hp": 150, "da√±o": 45, "exp": 100, "dinero": 500},
            {"nombre": "Soldado Enemigo", "hp": 90, "da√±o": 30, "exp": 60, "dinero": 250},
            {"nombre": "Mercenario", "hp": 120, "da√±o": 40, "exp": 80, "dinero": 400}
        ]
    
    def crear_misiones(self):
        return [
            Mision("Rescate de Rehenes", "Rescata a los civiles del edificio ocupado", "Rescate", 3, 150, 800),
            Mision("Eliminar C√©lula Terrorista", "Infiltra y elimina a los terroristas", "Combate", 4, 200, 1000),
            Mision("Reconocimiento", "Obt√©n informaci√≥n sobre el enemigo", "Intel", 2, 80, 400),
            Mision("Emboscada", "Tiende una emboscada al convoy enemigo", "Sigilo", 3, 120, 600),
            Mision("Proteger VIP", "Escolta y protege al dignatario", "Protecci√≥n", 5, 250, 1200)
        ]
    
    def iniciar_juego(self):
        print("=" * 50)
        print("üéÆ BIENVENIDA AL RPG SOLDADO ELITE üéÆ")
        print("=" * 50)
        nombre = input("Ingresa el nombre de tu soldado: ")
        self.soldado = Soldado(nombre)
        
        print(f"\n¬°Bienvenida, soldado {nombre}!")
        print("Has sido asignada a operaciones especiales.")
        
        # Elegir mascota
        self.elegir_mascota()
        
        # Elegir novia
        self.elegir_novia()
        
        # Bucle principal del juego
        self.bucle_principal()
    
    def elegir_mascota(self):
        print("\nüêï SELECCIONA TU MASCOTA COMPA√ëERA:")
        print("1. Perro (Bonus combate +5)")
        print("2. Gato (Bonus sigilo +5)")
        print("3. Halc√≥n (Bonus intel +5)")
        
        while True:
            try:
                opcion = int(input("Elige (1-3): "))
                if opcion == 1:
                    nombre = input("Nombre de tu perro: ")
                    self.soldado.mascota = Mascota(nombre, "Perro")
                    break
                elif opcion == 2:
                    nombre = input("Nombre de tu gato: ")
                    self.soldado.mascota = Mascota(nombre, "Gato")
                    break
                elif opcion == 3:
                    nombre = input("Nombre de tu halc√≥n: ")
                    self.soldado.mascota = Mascota(nombre, "Halc√≥n")
                    break
            except ValueError:
                print("Opci√≥n inv√°lida.")
        
        print(f"\n¬°{self.soldado.mascota.nombre} se une a tu equipo!")
    
    def elegir_novia(self):
        print("\nüíï CONFIGURAR RELACI√ìN:")
        nombres = ["Ana", "Sofia", "Carmen", "Laura", "Isabel"]
        nombre = random.choice(nombres)
        respuesta = input(f"¬øQuieres que {nombre} sea tu novia? (s/n): ")
        
        if respuesta.lower() == 's':
            self.soldado.novia = Novia(nombre)
            print(f"\n¬°{nombre} es ahora tu novia! Cu√≠dala bien.")
        else:
            print("Decides mantenerte soltera por ahora.")
    
    def bucle_principal(self):
        while True:
            self.mostrar_menu_principal()
            try:
                opcion = int(input("Selecciona una opci√≥n: "))
                
                if opcion == 1:
                    self.mostrar_estado()
                elif opcion == 2:
                    self.menu_misiones()
                elif opcion == 3:
                    self.menu_tienda()
                elif opcion == 4:
                    self.menu_mejoras()
                elif opcion == 5:
                    self.menu_relaciones()
                elif opcion == 6:
                    self.menu_mascota()
                elif opcion == 7:
                    self.menu_inventario()
                elif opcion == 8:
                    self.entrenar()
                elif opcion == 9:
                    self.descansar()
                elif opcion == 10:
                    self.guardar_juego()
                elif opcion == 11:
                    print("¬°Hasta luego, soldado!")
                    break
                else:
                    print("Opci√≥n inv√°lida.")
            except ValueError:
                print("Por favor, ingresa un n√∫mero v√°lido.")
    
    def mostrar_menu_principal(self):
        print("\n" + "=" * 50)
        print(f"üéØ SOLDADO {self.soldado.nombre.upper()} - NIVEL {self.soldado.nivel}")
        print("=" * 50)
        print("1. üìä Ver Estado")
        print("2. ‚öîÔ∏è  Misiones")
        print("3. üè™ Tienda")
        print("4. ‚¨ÜÔ∏è  Mejoras")
        print("5. üíï Relaciones")
        print("6. üêæ Mascota")
        print("7. üéí Inventario")
        print("8. üèãÔ∏è  Entrenar")
        print("9. üò¥ Descansar")
        print("10. üíæ Guardar")
        print("11. üö™ Salir")
        print("=" * 50)
    
    def mostrar_estado(self):
        print("\nüìä ESTADO DEL SOLDADO:")
        print(f"Nombre: {self.soldado.nombre}")
        print(f"Nivel: {self.soldado.nivel}")
        print(f"HP: {self.soldado.hp}/{self.soldado.hp_max}")
        print(f"Energ√≠a: {self.soldado.energia}/{self.soldado.energia_max}")
        print(f"Experiencia: {self.soldado.exp}/{self.soldado.exp_siguiente}")
        print(f"Dinero: ${self.soldado.dinero}")
        print(f"Misiones completadas: {self.soldado.misiones_completadas}")
        print(f"Reputaci√≥n: {self.soldado.reputacion}")
        
        print("\n‚öîÔ∏è ATRIBUTOS:")
        print(f"Fuerza: {self.soldado.fuerza}")
        print(f"Agilidad: {self.soldado.agilidad}")
        print(f"Resistencia: {self.soldado.resistencia}")
        print(f"Punter√≠a: {self.soldado.punteria}")
        print(f"Carisma: {self.soldado.carisma}")
        
        if self.soldado.arma_actual:
            print(f"\nArma equipada: {self.soldado.arma_actual.nombre}")
        
        if self.soldado.mascota:
            print(f"\nMascota: {self.soldado.mascota.nombre} ({self.soldado.mascota.tipo})")
            print(f"Nivel mascota: {self.soldado.mascota.nivel}")
            print(f"Lealtad: {self.soldado.mascota.lealtad}/100")
        
        if self.soldado.novia:
            print(f"\nNovia: {self.soldado.novia.nombre}")
            print(f"Nivel de amor: {self.soldado.novia.amor}/100")
    
    def menu_misiones(self):
        print("\n‚öîÔ∏è MISIONES DISPONIBLES:")
        for i, mision in enumerate(self.misiones_disponibles, 1):
            if not mision.completada:
                print(f"{i}. {mision.nombre}")
                print(f"   Tipo: {mision.tipo} | Dificultad: {'‚≠ê' * mision.dificultad}")
                print(f"   Recompensa: {mision.recompensa_exp} EXP, ${mision.recompensa_dinero}")
                print(f"   {mision.descripcion}")
                print()
        
        print("0. Volver al men√∫")
        
        try:
            opcion = int(input("Selecciona una misi√≥n: "))
            if opcion == 0:
                return
            elif 1 <= opcion <= len(self.misiones_disponibles):
                mision = self.misiones_disponibles[opcion - 1]
                if not mision.completada:
                    self.ejecutar_mision(mision)
        except ValueError:
            print("Opci√≥n inv√°lida.")
    
    def ejecutar_mision(self, mision):
        print(f"\nüéØ INICIANDO MISI√ìN: {mision.nombre}")
        print(f"üìã {mision.descripcion}")
        
        if mision.tipo == "Combate":
            exito = self.mision_combate(mision)
        elif mision.tipo == "Sigilo":
            exito = self.mision_sigilo(mision)
        elif mision.tipo == "Rescate":
            exito = self.mision_rescate(mision)
        elif mision.tipo == "Intel":
            exito = self.mision_intel(mision)
        elif mision.tipo == "Protecci√≥n":
            exito = self.mision_proteccion(mision)
        else:
            exito = self.mision_generica(mision)
        
        if exito:
            print(f"\n‚úÖ ¬°MISI√ìN COMPLETADA CON √âXITO!")
            self.soldado.exp += mision.recompensa_exp
            self.soldado.dinero += mision.recompensa_dinero
            self.soldado.misiones_completadas += 1
            self.soldado.reputacion += 10
            mision.completada = True
            
            # Posible loot
            if random.random() < 0.3:
                loot = self.generar_loot()
                print(f"üéÅ Has encontrado: {loot['nombre']}")
                self.soldado.inventario.append(loot)
            
            self.verificar_subida_nivel()
        else:
            print(f"\n‚ùå Misi√≥n fallida. Pierdes energ√≠a.")
            self.soldado.energia -= 20
    
    def mision_combate(self, mision):
        print("\n‚öîÔ∏è ENTRANDO EN COMBATE...")
        enemigos = random.randint(1, 3)
        
        for i in range(enemigos):
            enemigo = random.choice(self.enemigos).copy()
            print(f"\nüéØ Enemigo {i+1}: {enemigo['nombre']}")
            
            if not self.combate(enemigo):
                return False
        
        return True
    
    def mision_sigilo(self, mision):
        print("\nü§´ MISI√ìN DE SIGILO...")
        probabilidad = 0.7
        
        # Bonus por agilidad y mascota
        if self.soldado.agilidad > 15:
            probabilidad += 0.1
        if self.soldado.mascota and self.soldado.mascota.tipo == "Gato":
            probabilidad += 0.15
        
        if random.random() < probabilidad:
            print("‚úÖ Te infiltras exitosamente sin ser detectada")
            return True
        else:
            print("‚ùå ¬°Te han detectado! Iniciando combate...")
            return self.mision_combate(mision)
    
    def mision_rescate(self, mision):
        print("\nüöÅ MISI√ìN DE RESCATE...")
        print("Localizas a los rehenes...")
        
        # Proteger a los rehenes durante el combate
        rehenes_hp = 100
        enemigos = 2
        
        for i in range(enemigos):
            enemigo = random.choice(self.enemigos).copy()
            print(f"\nüéØ Protegiendo rehenes de: {enemigo['nombre']}")
            
            # Los rehenes pueden ser heridos
            if random.random() < 0.3:
                da√±o_rehenes = random.randint(10, 20)
                rehenes_hp -= da√±o_rehenes
                print(f"üíî Los rehenes reciben {da√±o_rehenes} de da√±o")
            
            if not self.combate(enemigo):
                return False
        
        if rehenes_hp > 0:
            print(f"‚úÖ Rehenes rescatados con √©xito (HP: {rehenes_hp}/100)")
            return True
        else:
            print("‚ùå Los rehenes no sobrevivieron")
            return False
    
    def mision_intel(self, mision):
        print("\nüîç MISI√ìN DE INTELIGENCIA...")
        
        # Bonus por mascota halc√≥n
        probabilidad = 0.8
        if self.soldado.mascota and self.soldado.mascota.tipo == "Halc√≥n":
            probabilidad += 0.15
            print(f"ü¶Ö {self.soldado.mascota.nombre} proporciona reconocimiento a√©reo")
        
        if random.random() < probabilidad:
            print("‚úÖ Informaci√≥n valiosa obtenida")
            return True
        else:
            print("‚ùå No se pudo obtener la informaci√≥n")
            return False
    
    def mision_proteccion(self, mision):
        print("\nüõ°Ô∏è MISI√ìN DE PROTECCI√ìN...")
        vip_hp = 100
        oleadas = 3
        
        for i in range(oleadas):
            print(f"\nüåä Oleada {i+1} de enemigos")
            enemigo = random.choice(self.enemigos).copy()
            
            # El VIP puede ser atacado
            if random.random() < 0.4:
                da√±o_vip = random.randint(15, 25)
                vip_hp -= da√±o_vip
                print(f"üíî El VIP recibe {da√±o_vip} de da√±o")
            
            if not self.combate(enemigo):
                return False
            
            if vip_hp <= 0:
                print("‚ùå El VIP ha muerto")
                return False
        
        print(f"‚úÖ VIP protegido exitosamente (HP: {vip_hp}/100)")
        return True
    
    def mision_generica(self, mision):
        probabilidad = 0.6 + (self.soldado.nivel * 0.05)
        return random.random() < probabilidad
    
    def combate(self, enemigo):
        print(f"\n‚öîÔ∏è COMBATE CONTRA {enemigo['nombre']}")
        enemigo_hp = enemigo['hp']
        
        while enemigo_hp > 0 and self.soldado.hp > 0:
            print(f"\n{self.soldado.nombre}: {self.soldado.hp}/{self.soldado.hp_max} HP")
            print(f"{enemigo['nombre']}: {enemigo_hp}/{enemigo['hp']} HP")
            
            print("\n1. Atacar")
            print("2. Habilidad especial")
            print("3. Usar mascota")
            print("4. Huir")
            
            try:
                accion = int(input("Elige tu acci√≥n: "))
                
                if accion == 1:
                    da√±o = self.calcular_da√±o()
                    enemigo_hp -= da√±o
                    print(f"üí• Infliges {da√±o} de da√±o")
                
                elif accion == 2:
                    if self.soldado.energia >= 20:
                        da√±o = self.calcular_da√±o() * 1.5
                        enemigo_hp -= int(da√±o)
                        self.soldado.energia -= 20
                        print(f"üí• Habilidad especial: {int(da√±o)} de da√±o")
                    else:
                        print("‚ùå No tienes suficiente energ√≠a")
                        continue
                
                elif accion == 3:
                    if self.soldado.mascota and self.soldado.mascota.hp > 0:
                        da√±o_mascota = 15 + self.soldado.mascota.nivel * 5
                        enemigo_hp -= da√±o_mascota
                        print(f"üêæ {self.soldado.mascota.nombre} ataca por {da√±o_mascota} de da√±o")
                    else:
                        print("‚ùå Tu mascota no puede atacar")
                        continue
                
                elif accion == 4:
                    print("üèÉ Huyes del combate")
                    return False
                
                # Ataque del enemigo
                if enemigo_hp > 0:
                    da√±o_enemigo = random.randint(enemigo['da√±o'] - 5, enemigo['da√±o'] + 5)
                    # Reducir da√±o por armadura/resistencia
                    da√±o_reducido = max(1, da√±o_enemigo - self.soldado.resistencia // 2)
                    self.soldado.hp -= da√±o_reducido
                    print(f"üíî {enemigo['nombre']} te ataca por {da√±o_reducido} de da√±o")
                    
                    if self.soldado.hp <= 0:
                        print("üíÄ Has sido derrotada...")
                        self.soldado.hp = 1
                        return False
                        
            except ValueError:
                print("Opci√≥n inv√°lida")
        
        if enemigo_hp <= 0:
            print(f"‚úÖ ¬°Has derrotado a {enemigo['nombre']}!")
            self.soldado.exp += enemigo['exp']
            self.soldado.dinero += enemigo['dinero']
            return True
        
        return False
    
    def calcular_da√±o(self):
        da√±o_base = self.soldado.fuerza + random.randint(5, 15)
        
        if self.soldado.arma_actual:
            da√±o_arma = self.soldado.arma_actual.da√±o
            # Precisi√≥n afecta la probabilidad de da√±o m√°ximo
            if random.randint(1, 100) <= self.soldado.arma_actual.precisi√≥n:
                da√±o_total = da√±o_base + da√±o_arma
            else:
                da√±o_total = da√±o_base + (da√±o_arma // 2)
        else:
            da√±o_total = da√±o_base
        
        return max(1, da√±o_total)
    
    def menu_tienda(self):
        print("\nüè™ TIENDA MILITAR")
        print("1. Armas")
        print("2. Regalos")
        print("3. Vender loot")
        print("0. Volver")
        
        try:
            opcion = int(input("Selecciona: "))
            if opcion == 1:
                self.tienda_armas()
            elif opcion == 2:
                self.tienda_regalos()
            elif opcion == 3:
                self.vender_loot()
        except ValueError:
            print("Opci√≥n inv√°lida")
    
    def tienda_armas(self):
        print("\nüî´ TIENDA DE ARMAS:")
        for i, arma in enumerate(self.tienda_armas, 1):
            print(f"{i}. {arma.nombre} - ${arma.precio}")
            print(f"   Da√±o: {arma.da√±o} | Precisi√≥n: {arma.precisi√≥n}%")
        
        print("0. Volver")
        
        try:
            opcion = int(input("Comprar arma: "))
            if opcion == 0:
                return
            elif 1 <= opcion <= len(self.tienda_armas):
                arma = self.tienda_armas[opcion - 1]
                if self.soldado.dinero >= arma.precio:
                    self.soldado.dinero -= arma.precio
                    self.soldado.armas.append(arma)
                    print(f"‚úÖ Has comprado {arma.nombre}")
                else:
                    print("‚ùå No tienes suficiente dinero")
        except ValueError:
            print("Opci√≥n inv√°lida")
    
    def tienda_regalos(self):
        if not self.soldado.novia:
            print("‚ùå Necesitas una novia para comprar regalos")
            return
        
        print("\nüíù TIENDA DE REGALOS:")
        for i, regalo in enumerate(self.tienda_regalos, 1):
            print(f"{i}. {regalo['nombre']} - ${regalo['precio']} (+{regalo['amor']} amor)")
        
        print("0. Volver")
        
        try:
            opcion = int(input("Comprar regalo: "))
            if opcion == 0:
                return
            elif 1 <= opcion <= len(self.tienda_regalos):
                regalo = self.tienda_regalos[opcion - 1]
                if self.soldado.dinero >= regalo['precio']:
                    self.soldado.dinero -= regalo['precio']
                    self.soldado.regalos.append(regalo)
                    print(f"‚úÖ Has comprado {regalo['nombre']}")
                else:
                    print("‚ùå No tienes suficiente dinero")
        except ValueError:
            print("Opci√≥n inv√°lida")
    
    def vender_loot(self):
        if not self.soldado.inventario:
            print("‚ùå No tienes objetos para vender")
            return
        
        print("\nüí∞ VENDER LOOT:")
        for i, item in enumerate(self.soldado.inventario, 1):
            print(f"{i}. {item['nombre']} - ${item['precio']}")
        
        print("0. Volver")
        
        try:
            opcion = int(input("Vender objeto: "))
            if opcion == 0:
                return
            elif 1 <= opcion <= len(self.soldado.inventario):
                item = self.soldado.inventario.pop(opcion - 1)
                self.soldado.dinero += item['precio']
                print(f"‚úÖ Has vendido {item['nombre']} por ${item['precio']}")
        except ValueError:
            print("Opci√≥n inv√°lida")
    
    def generar_loot(self):
        objetos = [
            {"nombre": "Munici√≥n", "precio": 50},
            {"nombre": "Kit m√©dico", "precio": 100},
            {"nombre": "Mira telesc√≥pica", "precio": 200},
            {"nombre": "Chaleco antibalas", "precio": 300},
            {"nombre": "Granadas", "precio": 150},
            {"nombre": "Informaci√≥n clasificada", "precio": 500},
            {"nombre": "Componente de arma", "precio": 250}
        ]
        return random.choice(objetos)
    
    def menu_mejoras(self):
        print("\n‚¨ÜÔ∏è MEJORAS:")
        print(f"Puntos de habilidad disponibles: {self.soldado.puntos_habilidad}")
        print("1. Fuerza (+1) - 1 punto")
        print("2. Agilidad (+1) - 1 punto")
        print("3. Resistencia (+1) - 1 punto")
        print("4. Punter√≠a (+1) - 1 punto")
        print("5. Carisma (+1) - 1 punto")
        print("6. Mejorar arma equipada")
        print("0. Volver")
        
        try:
            opcion = int(input("Selecciona mejora: "))
            if opcion == 0:
                return
            elif 1 <= opcion <= 5 and self.soldado.puntos_habilidad > 0:
                self.mejorar_atributo(opcion)
            elif opcion == 6:
                self.mejorar_arma()
            else:
                print("‚ùå No tienes puntos suficientes o opci√≥n inv√°lida")
        except ValueError:
            print("Opci√≥n inv√°lida")
    
    def mejorar_atributo(self, opcion):
        atributos = ["fuerza", "agilidad", "resistencia", "punteria", "carisma"]
        atributo = atributos[opcion - 1]
        
        setattr(self.soldado, atributo, getattr(self.soldado, atributo) + 1)
        self.soldado.puntos_habilidad -= 1
        print(f"‚úÖ {atributo.capitalize()} mejorado a {getattr(self.soldado, atributo)}")
    
    def mejorar_arma(self):
        if not self.soldado.arma_actual:
            print("‚ùå No tienes un arma equipada")
            return
        
        costo = (self.soldado.arma_actual.nivel_mejora + 1) * 100
        
        if self.soldado.dinero >= costo:
            self.soldado.dinero -= costo
            self.soldado.arma_actual.nivel_mejora += 1
            self.soldado.arma_actual.da√±o += 5
            self.soldado.arma_actual.precisi√≥n += 2
            print(f"‚úÖ {self.soldado.arma_actual.nombre} mejorado a nivel {self.soldado.arma_actual.nivel_mejora}")
        else:
            print(f"‚ùå Necesitas ${costo} para mejorar el arma")
    
    def menu_relaciones(self):
        if not self.soldado.novia:
            print("‚ùå No tienes novia actualmente")
            return
        
        print(f"\nüíï RELACI√ìN CON {self.soldado.novia.nombre.upper()}")
        print(f"Nivel de amor: {self.soldado.novia.amor}/100")
        print(f"Estado: {'En peligro' if self.soldado.novia.en_peligro else 'Segura'}")
        print(f"Regalos recibidos: {len(self.soldado.novia.regalos_recibidos)}")
        
        print("\n1. Dar regalo")
        print("2. Pasar tiempo juntas")
        print("3. Misi√≥n de protecci√≥n")
        print("4. Enviar mensaje")
        print("0. Volver")
        
        try:
            opcion = int(input("Selecciona: "))
            if opcion == 1:
                self.dar_regalo()
            elif opcion == 2:
                self.pasar_tiempo()
            elif opcion == 3:
                self.mision_proteger_novia()
            elif opcion == 4:
                self.enviar_mensaje()
        except ValueError:
            print("Opci√≥n inv√°lida")
    
    def dar_regalo(self):
        if not self.soldado.regalos:
            print("‚ùå No tienes regalos para dar")
            return
        
        print("\nüéÅ REGALOS DISPONIBLES:")
        for i, regalo in enumerate(self.soldado.regalos, 1):
            print(f"{i}. {regalo['nombre']} (+{regalo['amor']} amor)")
        
        try:
            opcion = int(input("Dar regalo: ")) - 1
            if 0 <= opcion < len(self.soldado.regalos):
                regalo = self.soldado.regalos.pop(opcion)
                self.soldado.novia.amor += regalo['amor']
                self.soldado.novia.regalos_recibidos.append(regalo)
                print(f"üíù Le has dado {regalo['nombre']} a {self.soldado.novia.nombre}")
                print(f"‚ù§Ô∏è Su amor aument√≥ a {self.soldado.novia.amor}/100")
        except ValueError:
            print("Opci√≥n inv√°lida")
    
    def pasar_tiempo(self):
        if self.soldado.energia < 20:
            print("‚ùå No tienes suficiente energ√≠a")
            return
        
        self.soldado.energia -= 20
        amor_ganado = random.randint(5, 15)
        self.soldado.novia.amor += amor_ganado
        
        actividades = [
            "Caminan por el parque",
            "Ven una pel√≠cula juntas",
            "Cocinan una cena rom√°ntica",
            "Hablan bajo las estrellas",
            "Van a un caf√© acogedor"
        ]
        
        actividad = random.choice(actividades)
        print(f"üíï {actividad}")
        print(f"‚ù§Ô∏è Amor aument√≥ en {amor_ganado} puntos")
    
    def mision_proteger_novia(self):
        if not self.soldado.novia.en_peligro:
            # Crear situaci√≥n de peligro
            if random.random() < 0.3:
                self.soldado.novia.en_peligro = True
                print(f"‚ö†Ô∏è ¬°{self.soldado.novia.nombre} est√° en peligro!")
                print("Unos criminales la han amenazado")
            else:
                print("‚úÖ Tu novia est√° segura por ahora")
                return
        
        print(f"\nüõ°Ô∏è PROTEGIENDO A {self.soldado.novia.nombre}")
        print("Enfrentas a los criminales que la amenazan")
        
        enemigos = 2
        for i in range(enemigos):
            enemigo = {"nombre": "Criminal", "hp": 40, "da√±o": 15, "exp": 20, "dinero": 50}
            if not self.combate(enemigo):
                print(f"üíî No pudiste proteger a {self.soldado.novia.nombre}")
                self.soldado.novia.amor -= 20
                return
        
        print(f"‚úÖ ¬°Has protegido exitosamente a {self.soldado.novia.nombre}!")
        self.soldado.novia.en_peligro = False
        self.soldado.novia.amor += 25
        print(f"‚ù§Ô∏è Su amor aument√≥ significativamente")
    
    def enviar_mensaje(self):
        if self.soldado.mascota and self.soldado.mascota.tipo == "Halc√≥n":
            print(f"üì® {self.soldado.mascota.nombre} lleva tu mensaje")
            mensaje = input("Escribe tu mensaje: ")
            print(f"üíå Mensaje enviado: '{mensaje}'")
            self.soldado.novia.amor += 5
            self.soldado.mascota.lealtad += 5
        else:
            print("‚ùå Necesitas un halc√≥n para enviar mensajes")
    
    def menu_mascota(self):
        if not self.soldado.mascota:
            print("‚ùå No tienes mascota")
            return
        
        mascota = self.soldado.mascota
        print(f"\nüêæ {mascota.nombre.upper()} - {mascota.tipo}")
        print(f"Nivel: {mascota.nivel}")
        print(f"HP: {mascota.hp}/{mascota.hp_max}")
        print(f"Lealtad: {mascota.lealtad}/100")
        print(f"Habilidades: {', '.join(mascota.habilidades)}")
        
        print("\n1. Entrenar mascota")
        print("2. Alimentar mascota")
        print("3. Jugar con mascota")
        print("4. Usar habilidad especial")
        print("0. Volver")
        
        try:
            opcion = int(input("Selecciona: "))
            if opcion == 1:
                self.entrenar_mascota()
            elif opcion == 2:
                self.alimentar_mascota()
            elif opcion == 3:
                self.jugar_mascota()
            elif opcion == 4:
                self.habilidad_mascota()
        except ValueError:
            print("Opci√≥n inv√°lida")
    
    def entrenar_mascota(self):
        if self.soldado.energia < 30:
            print("‚ùå No tienes suficiente energ√≠a")
            return
        
        self.soldado.energia -= 30
        exp_ganada = random.randint(20, 40)
        
        print(f"üéæ Entrenas con {self.soldado.mascota.nombre}")
        print(f"üìà Gana {exp_ganada} puntos de experiencia")
        
        # Subir nivel de mascota
        if exp_ganada > 30:
            self.soldado.mascota.nivel += 1
            self.soldado.mascota.hp_max += 10
            self.soldado.mascota.hp = self.soldado.mascota.hp_max
            print(f"üéâ ¬°{self.soldado.mascota.nombre} subi√≥ al nivel {self.soldado.mascota.nivel}!")
    
    def alimentar_mascota(self):
        if self.soldado.dinero < 20:
            print("‚ùå No tienes suficiente dinero para comida")
            return
        
        self.soldado.dinero -= 20
        self.soldado.mascota.hp = self.soldado.mascota.hp_max
        self.soldado.mascota.lealtad += 10
        print(f"üçñ Alimentas a {self.soldado.mascota.nombre}")
        print(f"‚ù§Ô∏è Su lealtad aument√≥ a {self.soldado.mascota.lealtad}/100")
    
    def jugar_mascota(self):
        if self.soldado.energia < 15:
            print("‚ùå No tienes suficiente energ√≠a")
            return
        
        self.soldado.energia -= 15
        self.soldado.mascota.lealtad += 15
        
        juegos = [
            "Juegas a buscar la pelota",
            "Haces trucos juntos",
            "Corres por el campo",
            "Practicas comandos"
        ]
        
        juego = random.choice(juegos)
        print(f"üéÆ {juego}")
        print(f"‚ù§Ô∏è Lealtad aument√≥ a {self.soldado.mascota.lealtad}/100")
    
    def habilidad_mascota(self):
        mascota = self.soldado.mascota
        
        if mascota.tipo == "Perro":
            print("üêï Habilidades de perro:")
            print("1. Rastrear enemigos")
            print("2. Guardar per√≠metro")
            print("3. Ataque feroz")
        elif mascota.tipo == "Gato":
            print("üê± Habilidades de gato:")
            print("1. Sigilo mejorado")
            print("2. Detectar trampas")
            print("3. Movimiento silencioso")
        elif mascota.tipo == "Halc√≥n":
            print("ü¶Ö Habilidades de halc√≥n:")
            print("1. Reconocimiento a√©reo")
            print("2. Entregar mensajes")
            print("3. Vigilancia elevada")
        
        try:
            opcion = int(input("Usar habilidad: "))
            if 1 <= opcion <= 3:
                habilidad = mascota.habilidades[opcion - 1]
                print(f"‚ú® {mascota.nombre} usa {habilidad}")
                
                if habilidad == "Rastreo":
                    print("üîç Encuentra pistas de enemigos cercanos")
                elif habilidad == "Sigilo":
                    print("ü§´ Tu pr√≥xima misi√≥n de sigilo tendr√° bonus")
                elif habilidad == "Reconocimiento":
                    print("üëÅÔ∏è Revela informaci√≥n sobre el √°rea")
                
                mascota.lealtad += 5
        except ValueError:
            print("Opci√≥n inv√°lida")
    
    def menu_inventario(self):
        print("\nüéí INVENTARIO:")
        
        print("\nüî´ ARMAS:")
        if self.soldado.armas:
            for i, arma in enumerate(self.soldado.armas, 1):
                estado = "EQUIPADA" if arma == self.soldado.arma_actual else "En inventario"
                print(f"{i}. {arma.nombre} - {estado}")
                print(f"   Da√±o: {arma.da√±o} | Precisi√≥n: {arma.precisi√≥n}% | Nivel: {arma.nivel_mejora}")
        else:
            print("No tienes armas")
        
        print("\nüéÅ REGALOS:")
        if self.soldado.regalos:
            for regalo in self.soldado.regalos:
                print(f"- {regalo['nombre']} (+{regalo['amor']} amor)")
        else:
            print("No tienes regalos")
        
        print("\nüì¶ OBJETOS:")
        if self.soldado.inventario:
            for item in self.soldado.inventario:
                print(f"- {item['nombre']} (${item['precio']})")
        else:
            print("No tienes objetos")
        
        print("\n1. Equipar arma")
        print("0. Volver")
        
        try:
            opcion = int(input("Selecciona: "))
            if opcion == 1:
                self.equipar_arma()
        except ValueError:
            print("Opci√≥n inv√°lida")
    
    def equipar_arma(self):
        if not self.soldado.armas:
            print("‚ùå No tienes armas")
            return
        
        print("\nüî´ EQUIPAR ARMA:")
        for i, arma in enumerate(self.soldado.armas, 1):
            print(f"{i}. {arma.nombre}")
        
        try:
            opcion = int(input("Equipar arma: ")) - 1
            if 0 <= opcion < len(self.soldado.armas):
                self.soldado.arma_actual = self.soldado.armas[opcion]
                print(f"‚úÖ {self.soldado.arma_actual.nombre} equipada")
        except ValueError:
            print("Opci√≥n inv√°lida")
    
    def entrenar(self):
        print("\nüèãÔ∏è ENTRENAMIENTO:")
        print("1. Entrenamiento de fuerza (30 energ√≠a)")
        print("2. Entrenamiento de agilidad (30 energ√≠a)")
        print("3. Entrenamiento de punter√≠a (30 energ√≠a)")
        print("4. Entrenamiento de resistencia (30 energ√≠a)")
        print("0. Volver")
        
        try:
            opcion = int(input("Selecciona: "))
            if opcion == 0:
                return
            elif 1 <= opcion <= 4:
                if self.soldado.energia >= 30:
                    self.soldado.energia -= 30
                    
                    # Probabilidad de mejorar atributo
                    if random.random() < 0.4:
                        if opcion == 1:
                            self.soldado.fuerza += 1
                            print("üí™ ¬°Fuerza mejorada!")
                        elif opcion == 2:
                            self.soldado.agilidad += 1
                            print("üèÉ ¬°Agilidad mejorada!")
                        elif opcion == 3:
                            self.soldado.punteria += 1
                            print("üéØ ¬°Punter√≠a mejorada!")
                        elif opcion == 4:
                            self.soldado.resistencia += 1
                            print("üõ°Ô∏è ¬°Resistencia mejorada!")
                    else:
                        print("üìà Buen entrenamiento, sigue as√≠")
                    
                    # Ganar experiencia
                    self.soldado.exp += 10
                    self.verificar_subida_nivel()
                else:
                    print("‚ùå No tienes suficiente energ√≠a")
        except ValueError:
            print("Opci√≥n inv√°lida")
    
    def descansar(self):
        print("\nüò¥ DESCANSANDO...")
        
        # Recuperar HP y energ√≠a
        hp_recuperado = min(50, self.soldado.hp_max - self.soldado.hp)
        energia_recuperada = min(80, self.soldado.energia_max - self.soldado.energia)
        
        self.soldado.hp += hp_recuperado
        self.soldado.energia += energia_recuperada
        
        print(f"üíö HP recuperado: +{hp_recuperado}")
        print(f"‚ö° Energ√≠a recuperada: +{energia_recuperada}")
        
        # Recuperar mascota
        if self.soldado.mascota:
            mascota_hp = min(20, self.soldado.mascota.hp_max - self.soldado.mascota.hp)
            self.soldado.mascota.hp += mascota_hp
            print(f"üêæ {self.soldado.mascota.nombre} tambi√©n descans√≥ (+{mascota_hp} HP)")
        
        # Eventos aleatorios durante el descanso
        if random.random() < 0.2:
            eventos = [
                "Tienes un sue√±o inspirador (+5 puntos de experiencia)",
                "Encuentras dinero en tu uniforme (+50 d√≥lares)",
                "Tu mascota encuentra algo interesante"
            ]
            evento = random.choice(eventos)
            print(f"üåô {evento}")
            
            if "experiencia" in evento:
                self.soldado.exp += 5
            elif "dinero" in evento:
                self.soldado.dinero += 50
            elif "mascota" in evento and self.soldado.mascota:
                objeto = self.generar_loot()
                self.soldado.inventario.append(objeto)
                print(f"üéÅ {self.soldado.mascota.nombre} encontr√≥: {objeto['nombre']}")
    
    def verificar_subida_nivel(self):
        if self.soldado.exp >= self.soldado.exp_siguiente:
            self.soldado.nivel += 1
            self.soldado.exp -= self.soldado.exp_siguiente
            self.soldado.exp_siguiente = int(self.soldado.exp_siguiente * 1.5)
            
            # Beneficios por subir nivel
            self.soldado.hp_max += 20
            self.soldado.hp = self.soldado.hp_max
            self.soldado.energia_max += 15
            self.soldado.energia = self.soldado.energia_max
            self.soldado.puntos_habilidad += 2
            
            print(f"\nüéâ ¬°NIVEL SUBIDO! Ahora eres nivel {self.soldado.nivel}")
            print(f"üíö HP m√°ximo: {self.soldado.hp_max}")
            print(f"‚ö° Energ√≠a m√°xima: {self.soldado.energia_max}")
            print(f"üîß Puntos de habilidad: +2")
            
            # Bonus especial cada 5 niveles
            if self.soldado.nivel % 5 == 0:
                print("üåü ¬°BONUS ESPECIAL DE NIVEL!")
                self.soldado.dinero += 500
                print("üí∞ +500 d√≥lares")
    
    def guardar_juego(self):
        try:
            datos = {
                "nombre": self.soldado.nombre,
                "nivel": self.soldado.nivel,
                "exp": self.soldado.exp,
                "hp": self.soldado.hp,
                "dinero": self.soldado.dinero,
                "atributos": {
                    "fuerza": self.soldado.fuerza,
                    "agilidad": self.soldado.agilidad,
                    "resistencia": self.soldado.resistencia,
                    "punteria": self.soldado.punteria,
                    "carisma": self.soldado.carisma
                },
                "misiones_completadas": self.soldado.misiones_completadas,
                "reputacion": self.soldado.reputacion
            }
            
            with open("soldado_save.json", "w") as archivo:
                json.dump(datos, archivo, indent=2)
            
            print("üíæ Juego guardado exitosamente")
        except Exception as e:
            print(f"‚ùå Error al guardar: {e}")
    
    def cargar_juego(self):
        try:
            with open("soldado_save.json", "r") as archivo:
                datos = json.load(archivo)
            
            # Restaurar datos del soldado
            self.soldado = Soldado(datos["nombre"])
            self.soldado.nivel = datos["nivel"]
            self.soldado.exp = datos["exp"]
            self.soldado.hp = datos["hp"]
            self.soldado.dinero = datos["dinero"]
            
            # Restaurar atributos
            for attr, valor in datos["atributos"].items():
                setattr(self.soldado, attr, valor)
            
            self.soldado.misiones_completadas = datos["misiones_completadas"]
            self.soldado.reputacion = datos["reputacion"]
            
            print("üìÇ Juego cargado exitosamente")
            return True
        except FileNotFoundError:
            print("‚ùå No se encontr√≥ archivo de guardado")
            return False
        except Exception as e:
            print(f"‚ùå Error al cargar: {e}")
            return False

# Funci√≥n principal para ejecutar el juego
def main():
    juego = JuegoRPG()
    
    print("üéÆ RPG SOLDADO ELITE")
    print("1. Nuevo juego")
    print("2. Cargar juego")
    
    try:
        opcion = int(input("Selecciona: "))
        if opcion == 1:
            juego.iniciar_juego()
        elif opcion == 2:
            if juego.cargar_juego():
                juego.bucle_principal()
            else:
                print("Iniciando nuevo juego...")
                juego.iniciar_juego()
    except ValueError:
        print("Iniciando nuevo juego...")
        juego.iniciar_juego()

if __name__ == "__main__":
    main()
